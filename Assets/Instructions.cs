using System.Collections;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Text;
using UnityEngine;
using UnityEngine.XR.MagicLeap;
using UnityEngine.InputSystem;
using TMPro;



public class Instructions : MonoBehaviour
{
    // This was autogenerated and allows developers to create a dynamic
    // instance of an InputActionAsset which includes predefined action maps
    // that correspond to all of the Magic Leap 2's input.
    private MagicLeapInputs _magicLeapInputs;
    
    // This class is an Action Map and was autogenerated by the Unity Input
    // System and includes predefined bindings for the Magic Leap 2 Controller
    // Input Events.
    private MagicLeapInputs.ControllerActions _controllerActions;

    private NOODLESRoot _noodlesRoot;
    private TextMeshProUGUI _serverStatus;

    private System.Net.WebSockets.WebSocketState _connectionState = WebSocketState.None;

    public GameObject canvas;

    // Start is called before the first frame update
    void Start()
    {
        //Initialize the MagicLeapInputs like you would Unity's default action map.
       _magicLeapInputs = new MagicLeapInputs();
       _magicLeapInputs.Enable();
       //Initialize the ControllerActions based off the Magic Leap Input
       _controllerActions = new MagicLeapInputs.ControllerActions(_magicLeapInputs);
       _controllerActions.Trigger.started += HandleButtonPress;
       _controllerActions.Bumper.started += HandleButtonPress;
       _controllerActions.Menu.started += HandleMenu;

       _noodlesRoot = GameObject.Find("NoodlesRoot").gameObject.GetComponent<NOODLESRoot>();
       _serverStatus = GameObject.Find("ServerStatus").gameObject.GetComponent<TextMeshProUGUI>();
        Debug.Log("Instructions serverStatus " + GameObject.Find("ServerStatus") + " - " + _serverStatus);
       updateServerInfo();
    }

    void Update() {
        if (canvas.activeSelf) {
            updateServerInfo();
        }
    }

    void updateServerInfo()
    {
        if (_noodlesRoot) {
            _connectionState =_noodlesRoot.serverConnection();
            Debug.Log("Instructions updateServerInfo() " + _serverStatus);

            switch (_connectionState)
            {
                case WebSocketState.None:
                    _serverStatus.text = "Initializing ...";
                    _serverStatus.color = new Color(1.0f, 1.0f, 0.0f, 1.0f);
                    break;
                case WebSocketState.Connecting:
                    _serverStatus.text = "Connecting to server ...";
                    _serverStatus.color = new Color(1.0f, 1.0f, 0.0f, 1.0f);
                    break;
                case WebSocketState.Open:
                    _serverStatus.text = "Connected to server";
                    _serverStatus.color = new Color(0.0f, 1.0f, 0.0f, 1.0f);
                    break;
                default:
                    _serverStatus.text = "No server connection!\n\nStart the server and restart this app.";
                    _serverStatus.color = new Color(1.0f, 0.0f, 0.0f, 1.0f);
                    break;    
            }
        }
    }


    private void HandleButtonPress(InputAction.CallbackContext obj)
    {
        canvas.SetActive(false);
    }
    private void HandleMenu(InputAction.CallbackContext obj)
    {
        updateServerInfo();
        Debug.Log("Instructions Toggle");
        canvas.SetActive(!canvas.activeSelf);
    }
}
